#user www-data;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

# Number of file descriptors used for Nginx.
worker_rlimit_nofile 200000;

events {
	worker_connections 1000;
	use epoll;
	multi_accept on;
	accept_mutex on;
}

http {
	client_max_body_size 100m;
	open_file_cache max=200000 inactive=20s;
	open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
	open_file_cache_errors on;
	# Number of requests a client can make over the keep-alive connection.
	keepalive_requests 1000;
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=all:32m max_size=1g;
    log_format custom '$remote_addr [$time_local] "$host" $scheme "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" $request_length $request_time $upstream_response_time';
	log_format json_analytics escape=json '{'
            '"request_length": "$request_length", ' # request length (including headers and body)
            '"remote_addr": "$remote_addr", ' # client IP
            '"time_local": "$time_local", '
            '"request_uri": "$request_uri", ' # full path and arguments if the request
            '"args": "$args", ' # args
            '"status": "$status", ' # response status code
            '"body_bytes_sent": "$body_bytes_sent", ' # the number of body bytes exclude headers sent to a client
            '"bytes_sent": "$bytes_sent", ' # the number of bytes sent to a client
            '"http_referer": "$http_referer", ' # HTTP referer
            '"http_user_agent": "$http_user_agent", ' # user agent
            '"http_host": "$http_host", ' # the request Host: header
            '"server_name": "$server_name", ' # the name of the vhost serving the request
            '"request_time": "$request_time", ' # request processing time in seconds with msec resolution
            '"upstream": "$upstream_addr", ' # upstream backend server for proxied requests
            '"upstream_connect_time": "$upstream_connect_time", ' # upstream handshake time incl. TLS
            '"upstream_header_time": "$upstream_header_time", ' # time spent receiving upstream headers
            '"upstream_response_time": "$upstream_response_time", ' # time spend receiving upstream body
            '"upstream_response_length": "$upstream_response_length", ' # upstream response length
            '"upstream_cache_status": "$upstream_cache_status", ' # cache HIT/MISS where applicable
            '"scheme": "$scheme", ' # http or https
            '"request_method": "$request_method", ' # request method
            '"server_protocol": "$server_protocol", ' # request protocol, like HTTP/1.1 or HTTP/2.0
            '"gzip_ratio": "$gzip_ratio" '
            '}';
	# Allow the server to close the connection after a client stops responding.
	reset_timedout_connection on;

	# Send the client a "request timed out" if the body is not loaded by this time.
	client_body_timeout 5s;
	client_header_timeout 5s;

	# If the client stops reading data, free up the stale client connection after this much time.
	send_timeout 3;
	limit_req_zone $binary_remote_addr zone=dos_attack:20m rate=60r/m;


	#limit_conn_zone $binary_remote_addr zone=perip:40m;
	#limit_conn_zone $server_name zone=perserver:10m;
	#limit_conn perserver 100;
	#limit_conn perip 40;

	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
	keepalive_timeout 30;
	types_hash_max_size 2048;
	# server_tokens off;

	server_names_hash_bucket_size 64;
	# server_name_in_redirect off;

	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	##
	# SSL Settings
	##

	ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE
	ssl_prefer_server_ciphers on;

	##
	# Logging Settings
	##

	#access_log /var/log/nginx/access.log;
	error_log /var/log/nginx/error.log crit;

	##
	# Gzip Settings
	##

	gzip on;

	gzip_vary on;
	gzip_proxied any;
	gzip_comp_level 6;
	gzip_buffers 128 8k;
	gzip_http_version 1.1;
	gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

	##
	# Virtual Host Configs
	##

	include /etc/nginx/conf.d/*.conf;
	include /etc/nginx/sites-enabled/*;
}
